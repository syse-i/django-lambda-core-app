"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 2.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""
import os

from django.utils.translation import ugettext_lazy as _

import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

from lambda_config.settings.base import Settings as BaseSettings


__all__ = [
    'Settings',
]


# noinspection PyPep8Naming
class Settings(BaseSettings):

    """
    Lambda Core base settings, don't use this directly.
    """

    @property
    def INSTALLED_APPS(self):
        return super().INSTALLED_APPS + [
            # System apps
            'django.contrib.sites',
            # priority apps
            'lambda_core',
            # Theme apps
            'lambda_theme_tailwindcss',
            'lambda_theme',
            # third party apps
            'debug_toolbar',
            'corsheaders',
            'rest_framework',
            'knox',
            'allauth',
            'allauth.account',
            'allauth.socialaccount',
            'hijack',
            'compat',
            'reversion',
            'django_extensions',
            'notifications',
            'maintenance_mode',
            'django_filters',
            # 'guardian',
            # our apps
        ]

    @property
    def MIDDLEWARE(self):
        middleware = ['corsheaders.middleware.CorsMiddleware']
        middleware.extend(super().MIDDLEWARE)
        middleware.insert(2, 'django.middleware.locale.LocaleMiddleware')
        middleware.extend([
            'debug_toolbar.middleware.DebugToolbarMiddleware',
            'django.contrib.auth.middleware.AuthenticationMiddleware',
            'django.contrib.messages.middleware.MessageMiddleware',
            'django.middleware.clickjacking.XFrameOptionsMiddleware',
            'maintenance_mode.middleware.MaintenanceModeMiddleware',
        ])
        return middleware

    LOGIN_REDIRECT_URL = '/'
    LOGOUT_REDIRECT_URL = '/'

    @property
    def TEMPLATES_DIRS(self):
        return super().TEMPLATES_DIRS + [
            os.path.join(self.BASE_DIR, 'templates/'),
        ]

    @property
    def CONTEXT_PROCESSORS(self):
        return super().CONTEXT_PROCESSORS + [
            'maintenance_mode.context_processors.maintenance_mode',
        ]

    # noinspection PyPropertyAccess
    @property
    def TEMPLATES(self):
        return [{
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': self.TEMPLATES_DIRS,
            'APP_DIRS': True,
            'OPTIONS': {
                'builtins': ['lambda_theme.builtins'],
                'context_processors': self.CONTEXT_PROCESSORS,
            },
        }]

    DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_MAIL')

    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

    # Database
    # https://docs.djangoproject.com/en/2.0/ref/settings/#databases

    # DATABASE_ROUTERS = ['lambda_core.db.routers.BlockMigrationsRouter']รง

    @property
    def AUTHENTICATION_BACKENDS(self):
        return super().AUTHENTICATION_BACKENDS + [
            'allauth.account.auth_backends.AuthenticationBackend',
            # 'guardian.backends.ObjectPermissionBackend',
        ]

    # Internationalization
    # https://docs.djangoproject.com/en/2.0/topics/i18n/

    LANGUAGE_CODE = os.environ.get('LANGUAGE_CODE', 'es')

    @property
    def LOCALE_PATHS(self):
        return super().LOCALE_PATHS + [
            os.path.join(self.BASE_DIR, 'locale/'),
        ]

    LANGUAGES = (
        #('en', _('English')),
        ('es', _('Spanish')),
    )

    # Django Rest Framework
    # http://www.django-rest-framework.org/#installation

    REST_FRAMEWORK = {
        'DEFAULT_AUTHENTICATION_CLASSES': [
            'knox.auth.TokenAuthentication',
        ],
        'DEFAULT_PERMISSION_CLASSES': [
            'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
        ]
    }

    # Django Lambda Theme
    # https://gitlab.com/lambda-software/django-lambda-theme

    LAMBDA_THEME = 'tailwindcss'

    # Maintenance Mode
    # https://github.com/fabiocaccamo/django-maintenance-mode

    MAINTENANCE_MODE = False
    # if True admin site will not be affected by the maintenance-mode page
    MAINTENANCE_MODE_IGNORE_ADMIN_SITE = True
    # if True authenticated users will not see the maintenance-mode page
    MAINTENANCE_MODE_IGNORE_AUTHENTICATED_USER = True

    # Django Sites Framework
    # https://docs.djangoproject.com/en/2.2/ref/contrib/sites/#enabling-the-sites-framework

    SITE_ID = 1

    # Lambda Core
    # https://gitlab.com/lambda-software/django-lambda-core-app

    @property
    def LAMBDA_CONFIG_DIR(self):
        return os.path.join(self.BASE_DIR, '.lambda')

    @property
    def LAMBDA_EXTENSIONS_DIR(self):
        return os.path.join(self.BASE_DIR, '.lambda_extensions')

    # Django Allauth
    # https://django-allauth.readthedocs.io/en/latest/configuration.html

    ACCOUNT_USERNAME_REQUIRED = False
    ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True
    ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
    ACCOUNT_UNIQUE_EMAIL = True
    ACCOUNT_SESSION_REMEMBER = None
    ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
    ACCOUNT_EMAIL_REQUIRED = True
    ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
    ACCOUNT_SIGNUP_ENABLE = True
    ACCOUNT_FORMS = {
        'login': 'lambda_core.forms.LoginForm',
        'signup': 'lambda_core.forms.SignupForm',
        'add_email': 'lambda_core.forms.AddEmailForm',
        'change_password': 'lambda_core.forms.ChangePasswordForm',
        'set_password': 'lambda_core.forms.SetPasswordForm',
        'reset_password': 'lambda_core.forms.ResetPasswordForm',
        'reset_password_from_key': 'lambda_core.forms.ResetPasswordKeyForm',
        'disconnect': 'allauth.socialaccount.forms.DisconnectForm',
        'profile': 'lambda_core.user_profile.forms.ProfileForm',
    }
    ACCOUNT_ADAPTER = 'lambda_core.adapters.AccountAdapter'

    # Django Guardian
    # https://django-guardian.readthedocs.io

    ANONYMOUS_USER_NAME = None

    # Sentry IO
    # https://sentry.io/syse-i/lambda-core/getting-started/python-django/

    SENTRY_SDK_DSN = os.environ.get('SENTRY_SDK_DSN')

    # Django Notifications
    # http://github.com/django-notifications/django-notifications

    DJANGO_NOTIFICATIONS_CONFIG = {'USE_JSONFIELD': True}

    # Django Hijack
    # https://django-hijack.readthedocs.io/en/stable/

    HIJACK_LOGIN_REDIRECT_URL = LOGIN_REDIRECT_URL
    HIJACK_LOGOUT_REDIRECT_URL = LOGIN_REDIRECT_URL

    # Django Cors
    # https://github.com/adamchainz/django-cors-headers
    CORS_ORIGIN_ALLOW_ALL = True

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        if self.SENTRY_SDK_DSN:
            # If you wish to associate users to errors (assuming you are using
            # django.contrib.auth) you may enable sending PII data.
            sentry_sdk.init(
                dsn=self.SENTRY_SDK_DSN,
                integrations=[DjangoIntegration()],
                send_default_pii=True
            )
